---
import Layout from "../../layouts/Layout.astro";
import FacturacionItem from "../../components/payments/Facturacion-Item.astro";
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

const sessionCookie = Astro.cookies.get("__session")!.value;
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);
---

<Layout
  title="boveda de cursos"
  description="Detalles de su pedido y facturacion"
>

  <section class="bg-white p-10 md:p-10 relative">
    <div class="max-w-[1300px] flex flex-col gap-4 mt-30 md:mt-30 m-auto">
      
      <div class="grid gap-4 grid-cols-1 lg:grid-cols-6 lg:grid-rows-6">
        <!-- Detalles de facturación -->
        <div class="lg:col-span-4 lg:row-span-3">
          <div class="bg-gradient-to-br from-white via-gray-50 to-gray-100 rounded-lg border border-gray-300 p-10 shadow-lg w-full flex flex-col gap-8">
        
            <!-- Título principal -->
            <div class="flex flex-col gap-2">
              <h3 class="text-4xl font-extrabold text-gray-800">Detalles de facturación</h3>
              <p class="text-sm text-gray-500">Información del cliente asociada a esta compra.</p>
            </div>
        
            <!-- Datos del cliente -->
            <div class="grid gap-6 grid-cols-1 lg:grid-cols-4 lg:grid-rows-4 pt-4">
        
              <!-- Cliente -->
              <div class="lg:col-span-2 lg:row-span-2 bg-white rounded-md shadow-sm border border-gray-200 p-4">
                <p class="text-sm md:text-base text-gray-500 uppercase tracking-wide">Cliente</p>
                <p class="text-lg md:text-xl font-semibold text-gray-800 mt-1">{user.displayName}</p>
              </div>
        
              <!-- País / Región -->
              <div class="lg:col-span-2 lg:row-span-2 lg:col-start-3 bg-white rounded-md shadow-sm border border-gray-200 p-4">
                <p class="text-sm md:text-base text-gray-500 uppercase tracking-wide">País</p>
                <p id="location" class="text-lg md:text-xl font-semibold text-gray-800 mt-1"></p>
              </div>
        
              <!-- Correo electrónico -->
              <div class="lg:col-span-2 lg:row-span-2 lg:row-start-3 bg-white rounded-md shadow-sm border border-gray-200 p-4">
                <p class="text-sm md:text-base text-gray-500 uppercase tracking-wide">Correo electrónico</p>
                <p class="text-lg md:text-xl font-semibold text-gray-800 mt-1">{user.email}</p>
              </div>
        
            </div>
          </div>
        </div>
        <!-- Segundo elemento -->
        <div class="lg:col-span-2 lg:row-span-6 lg:col-start-5 space-y-5">
          <FacturacionItem/>
          <div id="facturacion-container"></div>
          <div class="relative max-h-[500px] overflow-y-auto overflow-hidden border border-gray-300 rounded-lg shadow-lg p-6 bg-gradient-to-br from-white via-gray-50 to-gray-100 flex flex-col gap-4">

            <!-- Encabezado -->
            <div class="flex flex-col gap-1">
              <h3 class="text-xl md:text-2xl font-bold text-gray-800">💳 Método de pago</h3>
              <p class="text-sm text-gray-500">Seleccione su forma de pago para completar la compra de sus cursos.</p>
            </div>
          
            <!-- Contenedor del botón (vacío por ahora) -->
            <div id="paypal-button-container" class="pt-4 z-[1]"></div>
          
          </div>
          </div> 
      </div>
  </section>
  <script type="module">
    import { getLocationFast } from '../src/utils/location.js';
    getLocationFast();
  </script>

  <!-- En tu componente Astro -->
  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      const carrito = JSON.parse(localStorage.getItem("carrito")) || [];
      const precioTotal = carrito.reduce((acc, item) => acc + parseFloat(item.PrecioActual || 0), 0);
      const container = document.querySelector("#paypal-button-container").parentElement;
container.scrollIntoView({ behavior: "smooth", block: "start" });
      if (window.paypal && precioTotal > 0) {
        paypal.Buttons({
          createOrder: (data, actions) => {
            return actions.order.create({
              purchase_units: [{
                amount: {
                  value: precioTotal.toFixed(2),
                  currency_code: "USD"
                }
              }]
            });
          },
          onApprove: (data, actions) => {
            return actions.order.capture().then(details => {
              alert(`Pago completado por ${details.payer.name.given_name}`);
              localStorage.removeItem("carrito");
              window.location.href = "/Cursos-Comprados";
            });
          },
          onError: err => {
            console.error("Error en el pago:", err);
            alert("Hubo un problema al procesar el pago.");
          }
        }).render("#paypal-button-container");
      }
    });
  </script>
  
  

  <script type="module">
    document.addEventListener('DOMContentLoaded', function () {
      const carrito = JSON.parse(localStorage.getItem("carrito")) || [];
      const template = document.querySelector(".facturacion-item-template");
      const facturacionContainer = document.getElementById("facturacion-container");
  
      if (!template || !facturacionContainer) return;
  
      let precioTotal = 0;
      const clone = template.cloneNode(true);
      clone.classList.remove("hidden", "facturacion-item-template");
  
      const listaProductos = clone.querySelector("#facturacion-lista-productos");
  
      carrito.forEach(buyNow => {
        const precio = parseFloat(buyNow.PrecioActual) || 0;
        precioTotal += precio;
  
        const itemHTML = `
  <div class="flex justify-between items-center py-4 px-2 bg-white rounded-md shadow-sm border border-gray-200 hover:bg-gray-50 transition-all duration-200">
    <span class="text-base md:text-lg font-medium text-gray-800">${buyNow.titulo}</span>
    <span class="text-sm md:text-base text-blue-700 font-semibold">$. ${precio.toFixed(2)}</span>
  </div>
`;
        listaProductos.insertAdjacentHTML("beforeend", itemHTML);
      });
  
      clone.querySelector(".curso-precioTotal").textContent = `$. ${precioTotal.toFixed(2)}`;
      facturacionContainer.appendChild(clone);
      
      
    });    
  </script>
</Layout>


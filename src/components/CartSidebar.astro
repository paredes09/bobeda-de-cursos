---
import Shopping_cart from "./icons/Shopping-cart.astro";
---
<div id="overlay"
  class="hidden fixed inset-0 bg-black/40 z-[90]"
  onclick="closeCart();"></div>

<!-- Sidebar del carrito -->
<div id="cartSidebar"
  class="fixed top-0 right-0 h-full w-72 md:w-96 bg-white shadow-xl translate-x-full transition-transform duration-300 z-[100] flex flex-col p-4 overflow-y-auto">

  <div class="flex justify-between items-center">
    <h2 class="text-lg font-semibold">Carrito de compras</h2>
    <button onclick="closeCart();" class="text-gray-400 hover:text-black text-xl">‚úñ</button>
  </div>

  <hr class="my-3" />

  <!-- Contenido din√°mico del carrito -->
  <div id="cartItems" class="flex flex-col gap-2">
    <p class="text-gray-500">Cargando carrito...</p>
  </div>
</div>

<!-- Bot√≥n global de abrir -->
  <button
    class="relative text-gray-700 hover:text-black"
    onclick="openCart()">
    <Shopping_cart class="size-8 inline-block" />
    <span
      id="cart-count"
      class="absolute -top-2 -right-2 bg-red-600 text-white text-xs font-bold px-2 py-0.5 rounded-full">
      0
    </span>
  </button>

<!-- Scripts embebidos -->
<script class="">
  import { getCart } from "../lib/wp.ts";

  let cartItems = [];

  // ‚úÖ Cargar carrito en el cliente apenas se abre la p√°gina
  async function loadCart() {
    try {
      console.log("üîÑ Cargando carrito desde WooCommerce...");
      cartItems = await getCart(); // Llamada fetch al backend
      console.log("‚úÖ Carrito cargado:", cartItems);

      renderCartItems();
      updateCartBadge();
    } catch (error) {
      console.error("‚ùå Error al cargar carrito:", error);
      document.getElementById("cartItems").innerHTML =
        '<p class="text-gray-500">Error al cargar el carrito.</p>';
    }
  }

  // ‚úÖ Renderizar productos dentro del sidebar
  function renderCartItems() {
    const container = document.getElementById("cartItems");
    container.innerHTML = ""; // limpiar contenido

    if (!cartItems || cartItems.length === 0) {
      container.innerHTML = '<p class="text-gray-500">No products in the cart.</p>';
      return;
    }

    cartItems.forEach((item) => {
      container.innerHTML += `
        <div class="flex items-center gap-3 p-2 border rounded-lg shadow-sm">
          <img src="${item.imageSrc}" alt="${item.name}" class="w-12 h-12 object-cover rounded border" />
          <div class="flex-1">
            <p class="text-sm font-medium">${item.name}</p>
            <p class="text-xs text-gray-500">Cantidad: <b>${item.quantity}</b></p>
          </div>
          <button class="text-gray-400 hover:text-red-500">‚úñ</button>
        </div>
      `;
    });
  }

  // ‚úÖ Actualiza la burbuja del √≠cono del carrito
  function updateCartBadge() {
    const badge = document.getElementById("cart-count");
    if (cartItems.length > 0) {
      badge.textContent = cartItems.length;
      badge.classList.remove("hidden");
    } else {
      badge.classList.add("hidden");
    }
  }

  // ‚úÖ Ejecutamos al cargar la p√°gina
  loadCart();

  // ‚úÖ Funciones para abrir y cerrar el carrito
  window.openCart = () => {
    console.log("üõí Abriendo sidebar...");
    document.getElementById('cartSidebar')?.classList.remove('translate-x-full');
    document.getElementById('overlay')?.classList.remove('hidden');
  };

  window.closeCart = () => {
    console.log("‚ùå Cerrando sidebar...");
    document.getElementById('cartSidebar')?.classList.add('translate-x-full');
    document.getElementById('overlay')?.classList.add('hidden');
  };
</script>
